{"version":3,"sources":["imagineResty.ts","hermes_config.ts","hermesjs.ts"],"names":["Imagine","Resty","getHostUrl","endpoint","protocol","hostname","port","isJson","headers","contentType","get","indexOf","Method","GET","POST","PUT","DELETE","PATCH","HEAD","OPTIONS","CONNECT","sendRequest","request","fetchFunction","jsonOverride","successCallback","errorCallback","JSON","fetchRequest","url","then","catch","err","response","_a","sent","status","undefined","method","text","res","parse","e","Promise","reject","ok","error","formatRequest","body","stringify","RestyLayer","config","_this","this","DEFAULT_PROTOCOL","DEFAULT_HOSTNAME","DEFAULT_PORT","DEFAULT_HEADERS","Content-type","Accept","initialize","setCallback","success","__awaiter","fetch","Fetch","defaultHeaders","Object","defineProperty","prototype","fetchOverride","window","Hermes","ConfigLoader","verboseLogging","version","loadFiles","settings","promises","_i","settings_1","length","c","p","loadConfigSetting","push","all","values","table","i","value","name","setting","location","Array","resolve","loadFilesFallthrough","default","console","urls","loadFileFallthrough","idx","url_1","fallback_1","urlPromise","url_2","log","json","err_1","fetch_1","loadFile","f","mergeTable","target","merge","name_1","configObj","HermesRest","getVersionRequest","getIPAddressRequest","getDatabasesRequest","createDatabaseRequest","dbName","deleteDatabaseRequest","getTablesRequest","createTableRequest","tableName","useOrderIndex","getTableKeysRequest","deleteTableRequest","getTableItemsRequest","insertItemRequest","item","upsertItemRequest","getItemRequest","key","deleteItemRequest","updateItemRequest","bulkInsertItemsRequest","items","bulkUpsertItemsRequest","bulkDeleteItemsRequest","keys","getPageRequest","pageSize","startKey","dynamicQueryRequest","pageNum","whereInject","orderbyInject","storedProcedureRequest","procName","queryType","params","queryParams","getSpecialKeysRequest","getSpecialItemRequest","deleteImageRequest","insertTextItemRequest","data","mimeType","upsertTextItemRequest","deleteTextItemRequest","getTextUrl","fileName","getFileUrl","getImageUrl","HermesDataLayer","_super","call","sendHermesRequest","r","getVersion","getIPAddress","getDatabases","createDatabase","deleteDatabase","getTables","createTable","getTableKeys","deleteTable","getTableItems","insertItem","upsertItem","getItem","deleteItem","updateItem","bulkInsertItems","bulkUpsertItems","bulkDeleteItems","getPage","dynamicQuery","storedProcedureQuery","storedProcedureScalar","storedProcedureNonQuery","getImageKeys","imageName","deleteImage","getTextKeys","getTextItem","resp","insertTextItem","upsertTextItem","deleteTextItem","getFileKeys","__extends"],"mappings":"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","file":"hermesjs.min.js","sourcesContent":["namespace Imagine.Resty {\r\n    export const Method = {\r\n        GET: \"GET\",\r\n        POST: \"POST\",\r\n        PUT: \"PUT\",\r\n        DELETE: \"DELETE\",\r\n        PATCH: \"PATCH\",\r\n        HEAD: \"HEAD\",\r\n        OPTIONS: \"OPTIONS\",\r\n        CONNECT: \"CONNECT\"\r\n    };\r\n \r\n    export function getHostUrl(endpoint: IEndpointConfig) {\r\n        return `${endpoint.protocol}://${endpoint.hostname}:${endpoint.port}`;\r\n    }\r\n\r\n    export async function sendRequest(request: IRestyRequestConfig, fetchFunction: (input: RequestInfo, init?: RequestInit) => Promise<Response>, jsonOverride?: JSON, successCallback?: () => void, errorCallback?: (err: any) => void): Promise<any> {\r\n\r\n        if (!jsonOverride)\r\n            jsonOverride = JSON;\r\n\r\n        let fetchRequest = fetchFunction(request.url, request);\r\n\r\n        if (successCallback) {\r\n            fetchRequest.then(successCallback);\r\n        }\r\n\r\n        if (errorCallback) {\r\n            fetchRequest.catch((err) => {\r\n                errorCallback(err);\r\n            });\r\n        }\r\n\r\n        const response = await fetchRequest;\r\n\r\n        if (response.status === 204)\r\n            return undefined;\r\n\r\n        if (response.status === 404 && request.method === \"GET\")\r\n            return undefined;\r\n\r\n        const text = await response.text();\r\n        let res: any = undefined;\r\n\r\n        try {\r\n            // if responseHeaders has json encoded info, return parsed \r\n            res = isJson(response.headers) ? jsonOverride.parse(text) : text;\r\n        }\r\n        catch (e) { // handle failed JSON parsing\r\n            return Promise.reject(e);\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const error = { res, status: response.status };\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /** checks the provided headers to see if the response should be considered a JSON response or not */\r\n    export function isJson(headers: Headers) {\r\n        const contentType = headers.get(\"Content-Type\");\r\n        return (contentType !== null && (contentType.indexOf(\"application/json\") !== -1 || contentType.indexOf(\"text/json\") !== -1))\r\n    }\r\n\r\n    /** adds headers and stringifies the body, making ready to send */\r\n    export function formatRequest(request: IRestyRequestConfig, jsonOverride?: JSON, headers?: any): IRestyRequestConfig {\r\n        if (!jsonOverride)\r\n            jsonOverride = JSON;\r\n\r\n        if (headers)\r\n            request.headers = headers;\r\n\r\n        request.body = jsonOverride.stringify(request.body);\r\n\r\n        return request;\r\n    }\r\n\r\n    /** base level REST layer class, implementing a basic REST data layer via fetch */\r\n    export class RestyLayer {\r\n        protected DEFAULT_PROTOCOL: string = \"http\"\r\n        protected DEFAULT_HOSTNAME: string = \"localhost\";\r\n        protected DEFAULT_PORT: number = 80;\r\n        protected DEFAULT_HEADERS = { \"Content-type\": \"application/json; charset=UTF-8\", \"Accept\": \"application/json, text/plain, */*\" };\r\n\r\n        constructor(protected config: IRestyConfig) {\r\n            this.initialize();\r\n        }\r\n\r\n        protected initialize = (config?: IRestyConfig) => {\r\n            if (config)\r\n                this.config = config;\r\n            // sanitize endpoint so it has something sane\r\n            this.config.endpoint.protocol = this.config.endpoint.protocol || this.DEFAULT_PROTOCOL;\r\n            this.config.endpoint.hostname = this.config.endpoint.hostname || this.DEFAULT_HOSTNAME;\r\n            this.config.endpoint.port = this.config.endpoint.port || this.DEFAULT_PORT;\r\n        }\r\n\r\n        public setCallback = (success: () => void, error: () => void) => {\r\n            if (success)\r\n                this.config.successCallback = success;\r\n            if (error)\r\n                this.config.errorCallback = error;\r\n        }\r\n\r\n        /** returns the protocol, hostname, and port combined as a base url */\r\n        public get baseUrl() {\r\n            return getHostUrl(this.config.endpoint);\r\n        }\r\n\r\n        /** checks the provided headers to see if the response should be considered a JSON response or not */\r\n        protected isJson = (headers: Headers) => {\r\n            return Resty.isJson(headers);\r\n        }\r\n\r\n        /** \r\n         * formats the provided IHermesRequestConfig with formatRequest, then checks the local fetchInject an uses it if available, falling through to window.fetch \r\n         * handles common errors and parsing of json / text responses\r\n         */\r\n        protected sendRequest = async (request: IRestyRequestConfig): Promise<any> => {\r\n            request = this.formatRequest(request);\r\n            let fetch = this.Fetch;\r\n            return Resty.sendRequest(request, fetch, this.JSON, this.config.successCallback);\r\n        }\r\n\r\n        /** adds headers and stringifies the body, making ready to send */\r\n        protected formatRequest = (request: IRestyRequestConfig, headers?: any): IRestyRequestConfig => {\r\n            return Resty.formatRequest(request, this.JSON, headers || this.config.defaultHeaders || this.DEFAULT_HEADERS);\r\n        }\r\n\r\n        /** returns the specially provided fetch override method, or the default global one if no override specified */\r\n        protected get Fetch(): (input: RequestInfo, init?: RequestInit) => Promise<Response> {\r\n            return this.config.fetchOverride ? this.config.fetchOverride.fetch : window.fetch;\r\n        }\r\n\r\n        protected get JSON() {\r\n            return this.config.jsonOverride ? this.config.jsonOverride : JSON;\r\n        }\r\n    }\r\n}","namespace Imagine.Hermes {\r\n\r\n    export type StringOrPromise = string | Promise<string>;\r\n\r\n    /** result of the loadFiles method, using the IConfigSettings.name field as indexer */\r\n    export interface IConfigSettingsTable {\r\n        [name: string]: IConfigSettings;\r\n    }\r\n\r\n    export interface IConfigSettings {\r\n        /** name to save this config under */\r\n        name: string;\r\n        /** list of locations to load this config item from */\r\n        location?: StringOrPromise | StringOrPromise[];\r\n        /** value to use, will skip any attempt to load from provided locations */\r\n        value?: any;\r\n        /** default value to use if all sources fail to load */\r\n        default?: any;\r\n    }\r\n\r\n    export class ConfigLoader {\r\n        public readonly version = \"1.5\";\r\n\r\n        constructor(public verboseLogging = false) {\r\n            if (this.verboseLogging)\r\n                console.log(`Imagine Config Loader ${this.version} instantiated`);\r\n        }\r\n\r\n        /** loads an array of IConfigSettings into an IConfigSettingsTable via window.fetch */\r\n        public loadFiles = (settings: IConfigSettings[]): Promise<IConfigSettingsTable> => {\r\n            let promises: Promise<any>[] = [];\r\n            for (let c of settings) {\r\n                let p = this.loadConfigSetting(c);\r\n                if (p)\r\n                    promises.push(p);\r\n            }\r\n\r\n            return Promise.all(promises).then((values: any[]) => {\r\n                let table: IConfigSettingsTable = {};\r\n\r\n                for (let i = 0; i < settings.length; i++) {\r\n                    settings[i].value = values[i];\r\n                    table[settings[i].name] = settings[i];\r\n                }\r\n\r\n                return table;\r\n            });\r\n        }\r\n\r\n        private loadConfigSetting = (setting: IConfigSettings) => {\r\n            // format location as array\r\n            if (!(setting.location instanceof Array))\r\n                setting.location = [setting.location];\r\n\r\n            // if a value is specified, skip loading from location list\r\n            if (setting.value)\r\n                return Promise.resolve(setting.value);\r\n\r\n            return this.loadFilesFallthrough(setting.location).catch((err) => {\r\n                // if a default exists, use that instead of failing\r\n                if (setting.default) {\r\n                    console.error(`Failed to load ${setting.name}, using default`, setting.default, err);\r\n                    return Promise.resolve(setting.default);\r\n                }\r\n                else {\r\n                    console.error(`Failed to load ${setting.name}`, err);\r\n                    return Promise.reject(`${err} ${setting.name}`);\r\n                }\r\n            });\r\n        }\r\n\r\n        /** attempt to load an array of urls, returning the first successful response, starting at 0 */\r\n        private loadFilesFallthrough = (urls: StringOrPromise[]): Promise<any> => {\r\n            return this.loadFileFallthrough(urls, 0);\r\n        }\r\n\r\n        /** attempt to load an array of urls, returning the first successful response */\r\n        private loadFileFallthrough = (urls: StringOrPromise[], idx: number): Promise<any> => {\r\n            if (urls && urls.length > 0 && idx >= 0 && idx < urls.length) {\r\n                let url = urls[idx];\r\n\r\n                let fallback = () => this.loadFileFallthrough(urls, idx + 1);\r\n\r\n                let fetch = async (urlPromise: Promise<string>) => {\r\n                    try {\r\n                        let url = await urlPromise;\r\n                        if (this.verboseLogging)\r\n                            console.log(`Attempting to load ${url}`);\r\n                        let res = await window.fetch(url);\r\n                        // return first valid response\r\n                        return res.ok ? res.json() : fallback();\r\n                    }\r\n                    catch (err) {\r\n                        // fallthrough to next\r\n                        if (this.verboseLogging)\r\n                            console.log(`Failed to load ${url}`, err);\r\n\r\n                        return fallback();\r\n                    }\r\n                }\r\n\r\n                return fetch(Promise.resolve(url));\r\n            }\r\n            else\r\n                return Promise.reject(\"failed to load\");\r\n        }\r\n\r\n        /** uses window.fetch to load a given URL */\r\n        public loadFile = (f: string): Promise<any> => {\r\n            return window.fetch(f).then(\r\n                (res) => {\r\n                    return res.json();\r\n                },\r\n                (err) => {\r\n                    console.error(`Failed to load ${f}`, err);\r\n                    return undefined;\r\n                }\r\n            );\r\n        }\r\n\r\n        /** merges IConfigSettingsTable merge into IConfigSettingsTable target, and returns target */\r\n        public mergeTable = (target: IConfigSettingsTable, merge: IConfigSettingsTable): IConfigSettingsTable => {\r\n            for (let name in merge) {\r\n                let configObj = merge[name];\r\n                target[name] = configObj;\r\n            }\r\n\r\n            return target;\r\n        }\r\n    }\r\n}","namespace Imagine.Hermes {\r\n    const Method = Imagine.Resty.Method;\r\n\r\n    export class HermesRest {\r\n\r\n        /** turns an IEndpointConfig into the root URL of Hermes API, defaults to http protocol if unspecified */\r\n        public static getHostUrl = (endpoint: Imagine.Resty.IEndpointConfig) => {\r\n            return `${ endpoint.protocol || \"http\" }://${ endpoint.hostname }:${ endpoint.port }`;\r\n        }\r\n\r\n        /** gets a version number */\r\n        public static getVersionRequest = (endpoint: Imagine.Resty.IEndpointConfig): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/version`,\r\n            };\r\n        }\r\n\r\n        public static getIPAddressRequest = (endpoint: Imagine.Resty.IEndpointConfig): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/utility/ipaddress`,\r\n            };\r\n        }\r\n\r\n        public static getDatabasesRequest = (endpoint: Imagine.Resty.IEndpointConfig): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api`,\r\n            };\r\n        }\r\n\r\n        public static createDatabaseRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}`,\r\n            };\r\n        }\r\n\r\n        public static deleteDatabaseRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.DELETE,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}`,\r\n            };\r\n        }\r\n\r\n        public static getTablesRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}`,\r\n            };\r\n        }\r\n\r\n        public static createTableRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, useOrderIndex: boolean): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}`,\r\n                body: {\r\n                    useOrderIndex: useOrderIndex\r\n                }\r\n            };\r\n        }\r\n\r\n        public static getTableKeysRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}`,\r\n            };\r\n        }\r\n\r\n        public static deleteTableRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.DELETE,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}`,\r\n            };\r\n        }\r\n\r\n        public static getTableItemsRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/items`,\r\n            };\r\n        }\r\n\r\n        public static insertItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, item: IHermesItem): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/items`,\r\n                body: item\r\n            };\r\n        }\r\n\r\n        public static upsertItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, item: IHermesItem): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.PUT,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/items`,\r\n                body: item\r\n            };\r\n        }\r\n\r\n        public static getItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, key: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/items/${key}`\r\n            };\r\n        }\r\n\r\n        public static deleteItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, key: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.DELETE,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/items/${key}`,\r\n            };\r\n        }\r\n\r\n        public static updateItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, key: string, item: any): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.PUT,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/items/${key}`,\r\n                body: item\r\n            };\r\n        }\r\n\r\n        public static bulkInsertItemsRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, items: IHermesItem[]): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/bulk-insert`,\r\n                body: {\r\n                    items: items\r\n                }\r\n            };\r\n        }\r\n\r\n        public static bulkUpsertItemsRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, items: IHermesItem[]): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/bulk-upsert`,\r\n                body: {\r\n                    items: items\r\n                }\r\n            };\r\n        }\r\n\r\n        public static bulkDeleteItemsRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, keys: string[]): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/bulk-delete`,\r\n                body: {\r\n                    keys: keys\r\n                }\r\n            };\r\n        }\r\n\r\n        public static getPageRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, pageSize: number, startKey?: string): Imagine.Resty.IRestyRequestConfig => {\r\n            if (!startKey)\r\n                startKey = null;\r\n\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/query/page`,\r\n                body: {\r\n                    startKey: startKey,\r\n                    pageSize: pageSize\r\n                }\r\n            };\r\n        }\r\n\r\n        public static dynamicQueryRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, pageNum: number, pageSize: number, whereInject: string, orderbyInject: string): Imagine.Resty.IRestyRequestConfig => {\r\n            if (typeof pageNum === 'undefined')\r\n                pageNum = null;\r\n            if (typeof pageNum === 'undefined')\r\n                pageSize = null;\r\n            if (!whereInject)\r\n                whereInject = null;\r\n            if (!orderbyInject)\r\n                orderbyInject = null;\r\n\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/tables/${tableName}/query/dynamic`,\r\n                body: {\r\n                    pageNum: pageNum,\r\n                    pageSize: pageSize,\r\n                    whereInject: whereInject,\r\n                    orderbyInject: orderbyInject\r\n                }\r\n            };\r\n        }\r\n\r\n        public static storedProcedureRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, procName: string, queryType: string, params: IHermesFunctionParams): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/function/${procName}`,\r\n                body: {\r\n                    queryType: queryType,\r\n                    queryParams: params\r\n                }\r\n            };\r\n        }\r\n\r\n        public static getSpecialKeysRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string) => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/${tableName}`\r\n            };\r\n        }\r\n\r\n\r\n        public static getSpecialItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, tableName: string, key: string) => {\r\n            return {\r\n                method: Method.GET,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/${tableName}/${key}`\r\n            };\r\n        }\r\n\r\n        public static deleteImageRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, key: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.DELETE,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/thumbnails/${key}`,\r\n            };\r\n        }\r\n\r\n        public static insertTextItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, key: string, data: string, mimeType?: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.POST,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/text/${key}`,\r\n                body: {\r\n                    text: data,\r\n                    mimeType: mimeType\r\n                }\r\n            };\r\n        }\r\n\r\n        public static upsertTextItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, key: string, data: string, mimeType?: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.PUT,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/text/${key}`,\r\n                body: {\r\n                    text: data,\r\n                    mimeType: mimeType\r\n                }\r\n            };\r\n        }\r\n\r\n        public static deleteTextItemRequest = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, key: string): Imagine.Resty.IRestyRequestConfig => {\r\n            return {\r\n                method: Method.DELETE,\r\n                url: `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/text/${key}`,\r\n            };\r\n        }\r\n\r\n        public static getTextUrl = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, fileName: string): string => {\r\n            return `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/text/${fileName}`;\r\n        }\r\n\r\n        public static getFileUrl = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, fileName: string): string => {\r\n            return `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/files/${fileName}`;\r\n        }\r\n\r\n        public static getImageUrl = (endpoint: Imagine.Resty.IEndpointConfig, dbName: string, fileName: string): string => {\r\n            return `${HermesRest.getHostUrl(endpoint)}/api/${dbName}/thumbnails/${fileName}`;\r\n        }\r\n    }\r\n\r\n    export class HermesDataLayer extends Imagine.Resty.RestyLayer {\r\n        constructor(config: Imagine.Resty.IRestyConfig) {\r\n            super(config);\r\n            this.DEFAULT_PORT = 9872;\r\n            // re-initialize as we overrode the default port\r\n            this.initialize();\r\n        }\r\n\r\n        /** need to manually parse string as Hermes returns responses as text/plain and \r\n         * default ImagineResty.sendRequest will return that as a string \r\n         */\r\n        private sendHermesRequest = async (request: Imagine.Resty.IRestyRequestConfig): Promise<any> => {\r\n            let r = await this.sendRequest(request);\r\n            let json;\r\n            try {\r\n                json = JSON.parse(r);\r\n            }\r\n            catch (err) {\r\n                console.error(\"Failed to parse response for \" + request.url, r);\r\n            }\r\n            return json;\r\n        }\r\n\r\n        public getVersion = (): Promise<IHermesResponse<number>> => {\r\n            return this.sendHermesRequest(HermesRest.getVersionRequest(this.config.endpoint));\r\n        }\r\n\r\n        public getIPAddress = (): Promise<IHermesResponse<string>> => {\r\n            return this.sendHermesRequest(HermesRest.getIPAddressRequest(this.config.endpoint));\r\n        }\r\n\r\n        public getDatabases = (): Promise<IHermesResponse<string[]>> => {\r\n            return this.sendHermesRequest(HermesRest.getDatabasesRequest(this.config.endpoint));\r\n        }\r\n\r\n        public createDatabase = (dbName: string): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.createDatabaseRequest(this.config.endpoint, dbName));\r\n        }\r\n\r\n        public deleteDatabase = (dbName: string): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.deleteDatabaseRequest(this.config.endpoint, dbName));\r\n        }\r\n\r\n        public getTables = (dbName: string): Promise<IHermesResponse<string[]>> => {\r\n            return this.sendHermesRequest(HermesRest.getTablesRequest(this.config.endpoint, dbName));\r\n        }\r\n\r\n        public createTable = (dbName: string, tableName: string, useOrderIndex: boolean = true): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.createTableRequest(this.config.endpoint, dbName, tableName, useOrderIndex));\r\n        }\r\n\r\n        public getTableKeys = (dbName: string, tableName: string): Promise<IHermesResponse<string[]>> => {\r\n            return this.sendHermesRequest(HermesRest.getTableKeysRequest(this.config.endpoint, dbName, tableName));\r\n        }\r\n\r\n        public deleteTable = (dbName: string, tableName: string): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.deleteTableRequest(this.config.endpoint, dbName, tableName));\r\n        }\r\n\r\n        public getTableItems = <T extends object = object>(dbName: string, tableName: string): Promise<IHermesResponse<IHermesItem<T>[]>> => {\r\n            return this.sendHermesRequest(HermesRest.getTableItemsRequest(this.config.endpoint, dbName, tableName));\r\n        }\r\n\r\n        public insertItem = (dbName: string, tableName: string, item: IHermesItem): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.insertItemRequest(this.config.endpoint, dbName, tableName, item));\r\n        }\r\n\r\n        public upsertItem = (dbName: string, tableName: string, item: IHermesItem): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.upsertItemRequest(this.config.endpoint, dbName, tableName, item));\r\n        }\r\n\r\n        public getItem = <T extends object = object>(dbName: string, tableName: string, key: string): Promise<IHermesResponse<IHermesItem<T>>> => {\r\n            return this.sendHermesRequest(HermesRest.getItemRequest(this.config.endpoint, dbName, tableName, key));\r\n        }\r\n\r\n        public deleteItem = (dbName: string, tableName: string, key: string): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.deleteItemRequest(this.config.endpoint, dbName, tableName, key));\r\n        }\r\n\r\n        public updateItem = (dbName: string, tableName: string, key: string, item: any): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.updateItemRequest(this.config.endpoint, dbName, tableName, key, item));\r\n        }\r\n\r\n        public bulkInsertItems = (dbName: string, tableName: string, items: IHermesItem[]): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.bulkInsertItemsRequest(this.config.endpoint, dbName, tableName, items));\r\n        }\r\n\r\n        public bulkUpsertItems = (dbName: string, tableName: string, items: IHermesItem[]): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.bulkUpsertItemsRequest(this.config.endpoint, dbName, tableName, items));\r\n        }\r\n\r\n        public bulkDeleteItems = (dbName: string, tableName: string, keys: string[]): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.bulkDeleteItemsRequest(this.config.endpoint, dbName, tableName, keys));\r\n        }\r\n\r\n        public getPage = <T extends object = object>(dbName: string, tableName: string, pageSize: number, startKey?: string): Promise<IHermesResponse<IHermesItem[]>> => {\r\n            return this.sendHermesRequest(HermesRest.getPageRequest(this.config.endpoint, dbName, tableName, pageSize, startKey));\r\n        }\r\n\r\n        public dynamicQuery = <T extends object = object>(dbName: string, tableName: string, pageNum: number, pageSize: number, whereInject: string, orderbyInject: string): Promise<IHermesResponse<IHermesItem[]>> => {\r\n            return this.sendHermesRequest(HermesRest.dynamicQueryRequest(this.config.endpoint, dbName, tableName, pageNum, pageSize, whereInject, orderbyInject));\r\n        }\r\n\r\n        public storedProcedureQuery = (dbName: string, procName: string, params: IHermesFunctionParams): Promise<IHermesResponse<IHermesTable>> => {\r\n            return this.sendHermesRequest(HermesRest.storedProcedureRequest(this.config.endpoint, dbName, procName, \"query\", params));\r\n        }\r\n\r\n        public storedProcedureScalar = (dbName: string, procName: string, params: IHermesFunctionParams): Promise<IHermesResponse<any>> => {\r\n            return this.sendHermesRequest(HermesRest.storedProcedureRequest(this.config.endpoint, dbName, procName, \"scalar\", params));\r\n        }\r\n\r\n        public storedProcedureNonQuery = (dbName: string, procName: string, params: IHermesFunctionParams): Promise<IHermesResponse<void>> => {\r\n            return this.sendHermesRequest(HermesRest.storedProcedureRequest(this.config.endpoint, dbName, procName, \"nonquery\", params));\r\n        }\r\n\r\n        public getImageKeys = (dbName: string) => {\r\n            return this.sendHermesRequest(HermesRest.getSpecialKeysRequest(this.config.endpoint, dbName, \"thumbnails\"));\r\n        }\r\n\r\n        /** returns a formatted URL for requesting an image from the Hermes thumbnail table */\r\n        public getImageUrl = (dbName: string, imageName: string): string => {\r\n            return HermesRest.getImageUrl(this.config.endpoint, dbName, imageName);\r\n        }\r\n\r\n        public deleteImage = (dbName: string, key: string) => {\r\n            return this.sendHermesRequest(HermesRest.deleteImageRequest(this.config.endpoint, dbName, key))\r\n        }\r\n\r\n        /** returns a formatted URL for requesting a text file from the Hermes text table */\r\n        public getTextUrl = (dbName: string, fileName: string): string => {\r\n            return HermesRest.getTextUrl(this.config.endpoint, dbName, fileName);\r\n        }\r\n\r\n        public getTextKeys = (dbName: string) => {\r\n            return this.sendHermesRequest(HermesRest.getSpecialKeysRequest(this.config.endpoint, dbName, \"text\"));\r\n        }\r\n\r\n        public getTextItem = (dbName: string, key: string): Promise<IHermesTextResponse> => {\r\n            let request = this.formatRequest(HermesRest.getSpecialItemRequest(this.config.endpoint, dbName, \"text\", key));\r\n            let fetch = this.Fetch;\r\n\r\n            return fetch(request.url, request).then((res) => {\r\n                let mimeType = res.headers.get(\"Content-Type\");\r\n                return res.text().then((resp) => {\r\n                    return {\r\n                        mimeType: mimeType,\r\n                        text: resp\r\n                    };\r\n                });\r\n            });\r\n        }\r\n\r\n        public insertTextItem = (dbName: string, key: string, data: string, mimeType?: string) => {\r\n            return this.sendHermesRequest(HermesRest.insertTextItemRequest(this.config.endpoint, dbName, key, data, mimeType));\r\n        }\r\n\r\n        public upsertTextItem = (dbName: string, key: string, data: string, mimeType?: string) => {\r\n            return this.sendHermesRequest(HermesRest.upsertTextItemRequest(this.config.endpoint, dbName, key, data, mimeType));\r\n        }\r\n\r\n        public deleteTextItem = (dbName: string, key: string) => {\r\n            return this.sendHermesRequest(HermesRest.deleteTextItemRequest(this.config.endpoint, dbName, key))\r\n        }\r\n\r\n        /** returns a formatted URL for requesting a file from the Hermes file table */\r\n        public getFileUrl = (dbName: string, fileName: string): string => {\r\n            return HermesRest.getFileUrl(this.config.endpoint, dbName, fileName);\r\n        }\r\n\r\n        public getFileKeys = (dbName: string) => {\r\n            return this.sendHermesRequest(HermesRest.getSpecialKeysRequest(this.config.endpoint, dbName, \"files\"));\r\n        }\r\n    }\r\n}"]}