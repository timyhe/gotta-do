interface ICompileTsOptions {
    src: any;
    dest: string;
    optionsSrc?: any;
    optionsOverride?: any;
    bundleName?: string;
    useUglify?: any;
    useSourcemaps?: boolean;
    preprocessContext?: any;
    outputDts?: boolean;
}

interface ICompileTsFunction {
    (options: ICompileTsOptions): void;
}

interface ICompileDTsOptions {
    src: any;
    dest: string;
    optionsSrc?: any;
    optionsOverride?: any;
    bundleName?: string;
}

interface ICompileDTsFunction {
    (options: ICompileDTsOptions): void;
}

interface IBundleHTMLOptions {
    src: any;
    dest: string;
    moduleName: string;
    fileName: string;
    root: string;
}

interface IBundleHtmlFunction {
    (options: IBundleHTMLOptions): void;
}

interface ICopyGlobOptions {
    src: any;
    dest: string;
    preprocessContext: any;
}

interface ICopyGlobFunction {
    (options: ICopyGlobOptions): void;
}

interface ICopyJsonOptions {
    src: any;
    dest: string;
    transform: (data, file: IJsonTransformFile) => string | Object;
}

interface IJsonTransformFile {
    path: string;
    relative: string;
    base: string;
}

interface ICopyJsonFunction {
    (options: ICopyJsonOptions): void;
}

interface ILibOptions {
    files: string[];
    dest: string;
    name: string;
}

interface ILibFunction {
    (options: ILibOptions): void;
}

declare module {
    var tools: {
        clean: (dest: string, forceClean: boolean) => any;
        compileTs: ICompileTsFunction;
        compileDts: ICompileDTsFunction;
        lib: ILibFunction;
        bundleHtml: IBundleHtmlFunction;
        copyConfig: (src, dest: string, preprocessContext) => any;
        copyJson: ICopyJsonFunction;
        copyGlob: ICopyGlobFunction;
        less: (src, dest: string) => any;
        guid: () => string;
    };

    var compileTs: ICompileTsFunction;
    var compileDts: ICompileDTsFunction;
    var bundleHtml: IBundleHtmlFunction;
    var copyGlob: ICopyGlobFunction;
    var copyJson: ICopyJsonFunction;
    var lib: ILibFunction;

    export = tools;
}