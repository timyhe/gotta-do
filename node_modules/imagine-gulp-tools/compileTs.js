/// <reference path="imagine-gulp-tools.d.ts" />
let path = require("path");
let gulp = require("gulp");
let util = require("gulp-util");
let gulpconcat = require("gulp-concat");    // concatenates all files together
let preprocess = require("gulp-preprocess");// does preprocessing of files
let ts = require("gulp-typescript");        // compiles typescript
let uglify = require("gulp-uglify");        // minifies javascript
let sourcemaps = require("gulp-sourcemaps");
let merge = require("merge2");

compileTs = (options) => {
    let tsOptions = options.optionsSrc ?
        ts.createProject(options.optionsSrc, options.optionsOverride) :
        ts.createProject({
            "target": "es5",
            "module": "commonjs",
            "removeComments": true,
            "declaration": true
        });

    let preprocessContext = options.preprocessContext ?
        { context: options.preprocessContext || {} } : false;

    let uglifyOptions = options.useUglify ? { mangle: true } : false;

    let bundleName = options.bundleName || "";

    let extension = path.extname(bundleName);
    let dtsBundleName = !extension ? bundleName + ".d.ts" : path.basename(bundleName, extension) + ".d.ts";

    let jsExtension = options.useUglify ? ".min.js" : ".js";
    let jsBundleName = !extension ? bundleName + jsExtension : bundleName;

    let tsResult = gulp.src(options.src)
        .pipe(preprocessContext ? preprocess(preprocessContext) : util.noop())
        .pipe(options.useSourcemaps ? sourcemaps.init() : util.noop())
        .pipe(tsOptions())

    let dtsStream = tsResult.dts
        .pipe(bundleName ? gulpconcat(dtsBundleName) : util.noop())
        .pipe(options.outputDts ? gulp.dest(options.dest) : util.noop());

    let jsStream = tsResult.js
        .pipe(bundleName ? gulpconcat(jsBundleName) : util.noop())
        .pipe(uglifyOptions ? uglify(uglifyOptions) : util.noop())
        .pipe(options.useSourcemaps ? sourcemaps.write("./") : util.noop())
        .pipe(gulp.dest(options.dest));

    return merge([dtsStream, jsStream]);
}

module.exports = compileTs;